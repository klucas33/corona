{"version":3,"sources":["Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","areaName","Array","useState","city","setCity","key","corona","undefined","countryName","push","data","setData","useEffect","totalCase","parseInt","replaceAll","newCase","recovered","death","name","className","newCcase","newFcase","onChange","e","console","log","target","value","map","tit","en","kr","percentage","style","height","marignTop","ResponsiveContainer","BarChart","width","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","stackId","fill","App","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21343a2a.chunk.js","sourcesContent":["import corona from './corona.json';\nimport {useState, useEffect} from 'react';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nfunction Main() {\n  \n  let areaName = new Array();\n  let [city,setCity] = useState('seoul');\n\n  for(let key in corona){\n    if(corona[key].countryName != undefined){\n      areaName.push({\n        \"kr\":corona[key].countryName ,\n        \"en\":key\n      })\n    }\n  }\n\n  let areaChange = (e)=>{\n    console.log(e.target.value);\n    setCity(e.target.value)\n  }\n\n  const [data,setData] = useState();\n\n  useEffect(()=>{  \n    \n    let totalCase = parseInt(corona[city].totalCase.replaceAll(',','')),\n        newCase = parseInt(corona[city].newCase),\n        recovered = parseInt(corona[city].recovered.replaceAll(',','')),\n        death = parseInt(corona[city].death.replaceAll(',','')),\n        care = totalCase - (recovered + death);\n\n    setData([\n      {\n        name: '확진자',\n        '인원': totalCase,\n        '추가': newCase\n      },\n      {\n        name: '검사중',\n        '인원': care\n      },\n      {\n        name: '격리해제',\n        '인원': recovered\n      },\n      {\n        name: '사망자',\n        '인원': death\n      }\n    ]);\n      \n  },[city]);//useEffect end\n  \n\n  return (\n    <>\n\n      <main>\n      \n        <article className=\"ko\">\n          <h2>국내현황</h2>\n          <div>\n            <span>전체확진자({corona['korea'].totalCase})</span>\n            <span>완치자({corona['korea'].recovered})</span>\n            <span>사망자({corona['korea'].death})</span>\n          </div>\n          <div>\n            <span>일일확진자({corona['korea'].newCase})</span>\n            <span>국내({corona['korea'].newCcase})</span>\n            <span>해외({corona['korea'].newFcase})</span>\n          </div>\n        </article>\n        \n        <article className=\"area\">\n          <h2>지역현황</h2>\n          <div>\n            <select onChange={areaChange}>\n              {\n                areaName.map(tit =>{    \n                  return (<option key={tit.en} value={tit.en}>\n                            {tit.kr}\n                          </option>);\n                })\n              }\n            </select>\n            <p>※ 원하시는 지역을 선택해주세요 </p>\n\n            <table>\n              <caption>{corona[city].countryName}</caption>\n              <thead>\n                <tr>\n                  <th>확진자</th><th>완치자</th><th>사망자</th><th>발생률</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    {corona[city].totalCase}명\n                    (+{corona[city].newCase})\n                  </td>\n                  <td>{corona[city].recovered}명</td>\n                  <td>{corona[city].death}</td>\n                  <td>{corona[city].percentage}%</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </article>\n        <div style={{height:'500px', marignTop:'50px'}}>\n          <ResponsiveContainer >\n            <BarChart\n              width={500}\n              height={300}\n              data={data}\n              margin={{\n                top: 20,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              \n              <Bar dataKey=\"인원\" stackId=\"a\" fill=\"#82ca9d\" />\n              <Bar dataKey=\"추가\" stackId=\"a\" fill=\"#f00\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </main>\n\n      \n    </>\n  );\n}\n\nexport default Main;\n","import './App.css';\nimport Main from './Main';\nimport {BrowserRouter, Route, Switch, Link} from 'react-router-dom';\n\nfunction App() {\n  \n  return (\n    <BrowserRouter>\n      <header>\n        코로나바이러스감염증-19(국내통계)\n        <Link to=\"/\">HOME</Link>\n        <Link to=\"/about\">about</Link>\n        <Link to=\"/work\">work</Link>\n        <Link to=\"/contact\">contact</Link>\n      </header>\n\n      <Switch>\n        <Route exact path='/' component={Main} />\n        <Route path='/about'>\n          <div>프로필</div>\n        </Route>\n        <Route path='/work'>\n          <div>포트폴리오</div>\n        </Route>\n        <Route path='/contact'>\n          <div>이메일.....</div>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}